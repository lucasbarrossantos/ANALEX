/* The following code was generated by JFlex 1.6.1 */

package lexer;

import Lexemas.Token;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/lucas/NetBeansProjects/Analisador Compiladores/src/lexer/arquivo.jflex</tt>
 */
public final class AnalisadorLexo {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
     * at the beginning of a line
     * l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
            0, 0
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED =
            "\11\0\2\13\2\0\1\13\22\0\1\7\1\3\3\0\1\12\1\6" +
                    "\1\0\1\51\1\52\1\10\1\4\1\61\1\4\1\17\1\11\1\15" +
                    "\11\16\1\60\1\57\1\1\1\2\1\1\2\0\4\14\1\20\15\14" +
                    "\1\50\7\14\1\55\1\0\1\56\1\0\1\14\1\0\1\23\1\26" +
                    "\1\31\1\33\1\21\1\36\1\47\1\43\1\24\1\14\1\45\1\30" +
                    "\1\22\1\25\1\27\1\41\1\14\1\37\1\32\1\35\1\42\1\44" +
                    "\1\40\1\34\1\46\1\14\1\53\1\5\1\54\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uff92\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0 =
            "\1\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5" +
                    "\1\1\1\5\1\6\2\7\1\10\20\6\1\11\1\12" +
                    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\2" +
                    "\1\22\4\0\6\6\1\23\13\6\1\24\13\6\1\25" +
                    "\1\0\1\26\3\6\1\27\2\6\1\30\1\31\17\6" +
                    "\1\32\6\6\1\33\1\26\1\34\1\6\1\35\1\36" +
                    "\6\6\1\37\2\6\1\40\4\6\1\41\1\42\7\6" +
                    "\1\43\1\6\3\26\6\6\1\44\1\6\1\45\2\6" +
                    "\1\46\1\6\1\47\1\50\2\6\1\51\4\6\1\52" +
                    "\5\6\1\53\1\54\1\6\1\55\1\6\1\56\1\6" +
                    "\1\57\1\60\1\61\3\6\1\62\1\6\1\63\1\64" +
                    "\1\65\3\6\1\66\2\6\1\67\1\70\1\71";

    private static int[] zzUnpackAction() {
        int[] result = new int[198];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0 =
            "\0\0\0\62\0\144\0\144\0\144\0\62\0\226\0\310" +
                    "\0\372\0\u012c\0\62\0\u015e\0\u0190\0\u01c2\0\62\0\u01f4" +
                    "\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384" +
                    "\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0\0\u04e2\0\62" +
                    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\62" +
                    "\0\62\0\62\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e" +
                    "\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u015e\0\u0708\0\u073a\0\u076c" +
                    "\0\u079e\0\u07d0\0\u0802\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc" +
                    "\0\u015e\0\u092e\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28\0\u0a5a" +
                    "\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\62\0\u0b54\0\u0b86\0\u0bb8" +
                    "\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4\0\u015e\0\u0d16" +
                    "\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74\0\u0ea6" +
                    "\0\u0ed8\0\u0f0a\0\u0f3c\0\u0f6e\0\u0fa0\0\u0fd2\0\u015e\0\u1004" +
                    "\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\62\0\u1130\0\u015e" +
                    "\0\u1162\0\u015e\0\u015e\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u125c" +
                    "\0\u128e\0\u015e\0\u12c0\0\u12f2\0\u015e\0\u1324\0\u1356\0\u1388" +
                    "\0\u13ba\0\u015e\0\u015e\0\u13ec\0\u141e\0\u1450\0\u1482\0\u14b4" +
                    "\0\u14e6\0\u1518\0\u015e\0\u154a\0\u157c\0\62\0\u15ae\0\u15e0" +
                    "\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u015e\0\u170c\0\u015e" +
                    "\0\u173e\0\u1770\0\u015e\0\u17a2\0\u17d4\0\u015e\0\u1806\0\u1838" +
                    "\0\u015e\0\u186a\0\u189c\0\u18ce\0\u1900\0\u015e\0\u1932\0\u1964" +
                    "\0\u1996\0\u19c8\0\u19fa\0\u015e\0\u015e\0\u1a2c\0\u015e\0\u1a5e" +
                    "\0\u015e\0\u1a90\0\u015e\0\u015e\0\u015e\0\u1ac2\0\u1af4\0\u1b26" +
                    "\0\u015e\0\u1b58\0\u015e\0\u015e\0\u015e\0\u1b8a\0\u1bbc\0\u1bee" +
                    "\0\u015e\0\u1c20\0\u1c52\0\u015e\0\u015e\0\u015e";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[198];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0 =
            "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11" +
                    "\1\2\1\12\1\2\1\13\1\14\1\15\1\16\1\17" +
                    "\1\14\1\20\1\21\1\22\1\23\1\24\1\25\2\14" +
                    "\1\26\1\27\1\30\1\14\1\31\1\32\1\33\1\34" +
                    "\1\35\2\14\1\36\3\14\1\37\1\40\1\41\1\42" +
                    "\1\43\1\44\1\45\1\46\1\47\1\50\64\0\1\51" +
                    "\64\0\1\52\62\0\1\52\61\0\1\53\1\0\3\54" +
                    "\57\0\1\55\65\0\3\14\1\0\31\14\30\0\1\56" +
                    "\57\0\2\16\1\56\56\0\3\14\1\0\10\14\1\57" +
                    "\3\14\1\60\14\14\25\0\3\14\1\0\3\14\1\61" +
                    "\25\14\25\0\3\14\1\0\17\14\1\62\11\14\25\0" +
                    "\3\14\1\0\2\14\1\63\2\14\1\64\10\14\1\65" +
                    "\12\14\25\0\3\14\1\0\1\14\1\66\27\14\25\0" +
                    "\3\14\1\0\7\14\1\67\7\14\1\70\11\14\25\0" +
                    "\3\14\1\0\3\14\1\71\3\14\1\72\1\73\12\14" +
                    "\1\74\5\14\25\0\3\14\1\0\15\14\1\75\2\14" +
                    "\1\76\1\14\1\77\6\14\25\0\3\14\1\0\1\14" +
                    "\1\100\5\14\1\101\21\14\25\0\3\14\1\0\17\14" +
                    "\1\102\3\14\1\103\5\14\25\0\3\14\1\0\3\14" +
                    "\1\104\1\105\2\14\1\106\21\14\25\0\3\14\1\0" +
                    "\1\14\1\107\27\14\25\0\3\14\1\0\23\14\1\110" +
                    "\5\14\25\0\3\14\1\0\3\14\1\111\16\14\1\112" +
                    "\6\14\25\0\3\14\1\0\7\14\1\113\21\14\25\0" +
                    "\3\14\1\0\15\14\1\114\13\14\17\0\1\54\62\0" +
                    "\1\115\52\0\10\55\1\116\51\55\15\0\2\117\57\0" +
                    "\3\14\1\0\12\14\1\120\16\14\25\0\3\14\1\0" +
                    "\15\14\1\121\13\14\25\0\3\14\1\0\4\14\1\122" +
                    "\24\14\25\0\3\14\1\0\27\14\1\123\1\14\25\0" +
                    "\3\14\1\0\21\14\1\124\7\14\25\0\3\14\1\0" +
                    "\12\14\1\125\2\14\1\126\13\14\25\0\3\14\1\0" +
                    "\20\14\1\127\10\14\25\0\3\14\1\0\7\14\1\130" +
                    "\21\14\25\0\3\14\1\0\1\14\1\131\27\14\25\0" +
                    "\3\14\1\0\12\14\1\132\16\14\25\0\3\14\1\0" +
                    "\5\14\1\133\23\14\25\0\3\14\1\0\3\14\1\134" +
                    "\25\14\25\0\3\14\1\0\3\14\1\135\25\14\25\0" +
                    "\3\14\1\0\3\14\1\136\25\14\25\0\3\14\1\0" +
                    "\4\14\1\137\24\14\25\0\3\14\1\0\21\14\1\140" +
                    "\7\14\25\0\3\14\1\0\16\14\1\141\12\14\25\0" +
                    "\3\14\1\0\22\14\1\142\6\14\25\0\3\14\1\0" +
                    "\4\14\1\143\12\14\1\144\11\14\25\0\3\14\1\0" +
                    "\10\14\1\145\20\14\25\0\3\14\1\0\5\14\1\146" +
                    "\23\14\25\0\3\14\1\0\17\14\1\147\11\14\25\0" +
                    "\3\14\1\0\15\14\1\150\13\14\25\0\3\14\1\0" +
                    "\4\14\1\151\24\14\25\0\3\14\1\0\11\14\1\152" +
                    "\17\14\25\0\3\14\1\0\6\14\1\153\22\14\25\0" +
                    "\3\14\1\0\4\14\1\154\24\14\25\0\3\14\1\0" +
                    "\17\14\1\155\11\14\11\0\10\55\1\116\1\156\50\55" +
                    "\15\0\2\117\1\0\2\157\54\0\3\14\1\0\1\14" +
                    "\1\160\27\14\25\0\3\14\1\0\1\14\1\161\27\14" +
                    "\25\0\3\14\1\0\5\14\1\162\23\14\25\0\3\14" +
                    "\1\0\12\14\1\163\16\14\25\0\3\14\1\0\7\14" +
                    "\1\164\1\165\20\14\25\0\3\14\1\0\15\14\1\166" +
                    "\13\14\25\0\3\14\1\0\1\14\1\167\27\14\25\0" +
                    "\3\14\1\0\10\14\1\170\20\14\25\0\3\14\1\0" +
                    "\3\14\1\171\25\14\25\0\3\14\1\0\1\14\1\172" +
                    "\27\14\25\0\3\14\1\0\15\14\1\173\13\14\25\0" +
                    "\3\14\1\0\12\14\1\174\16\14\25\0\3\14\1\0" +
                    "\17\14\1\175\11\14\25\0\3\14\1\0\15\14\1\176" +
                    "\13\14\25\0\3\14\1\0\15\14\1\177\13\14\25\0" +
                    "\3\14\1\0\1\14\1\200\27\14\25\0\3\14\1\0" +
                    "\3\14\1\201\25\14\25\0\3\14\1\0\1\14\1\202" +
                    "\27\14\25\0\3\14\1\0\12\14\1\203\16\14\25\0" +
                    "\3\14\1\0\7\14\1\204\21\14\25\0\3\14\1\0" +
                    "\12\14\1\205\16\14\25\0\3\14\1\0\3\14\1\206" +
                    "\25\14\25\0\3\14\1\0\22\14\1\207\6\14\25\0" +
                    "\3\14\1\0\10\14\1\210\20\14\25\0\3\14\1\0" +
                    "\25\14\1\211\3\14\25\0\3\14\1\0\10\14\1\212" +
                    "\20\14\25\0\3\14\1\0\13\14\1\213\15\14\25\0" +
                    "\3\14\1\0\4\14\1\214\24\14\15\0\1\215\10\0" +
                    "\1\216\1\217\57\0\3\14\1\0\5\14\1\220\23\14" +
                    "\25\0\3\14\1\0\17\14\1\221\11\14\25\0\3\14" +
                    "\1\0\1\14\1\222\27\14\25\0\3\14\1\0\3\14" +
                    "\1\223\25\14\25\0\3\14\1\0\17\14\1\224\11\14" +
                    "\25\0\3\14\1\0\1\14\1\225\27\14\25\0\3\14" +
                    "\1\0\25\14\1\226\3\14\25\0\3\14\1\0\4\14" +
                    "\1\227\24\14\25\0\3\14\1\0\12\14\1\230\16\14" +
                    "\25\0\3\14\1\0\4\14\1\231\24\14\25\0\3\14" +
                    "\1\0\11\14\1\232\17\14\25\0\3\14\1\0\17\14" +
                    "\1\233\11\14\25\0\3\14\1\0\22\14\1\234\6\14" +
                    "\25\0\3\14\1\0\20\14\1\235\10\14\25\0\3\14" +
                    "\1\0\1\14\1\236\27\14\25\0\3\14\1\0\10\14" +
                    "\1\237\20\14\25\0\3\14\1\0\17\14\1\240\11\14" +
                    "\25\0\3\14\1\0\1\14\1\241\27\14\25\0\3\14" +
                    "\1\0\3\14\1\242\25\14\25\0\3\14\1\0\4\14" +
                    "\1\243\24\14\25\0\3\14\1\0\5\14\1\244\23\14" +
                    "\26\0\1\216\1\217\60\0\2\217\57\0\3\14\1\0" +
                    "\13\14\1\245\15\14\25\0\3\14\1\0\15\14\1\246" +
                    "\13\14\25\0\3\14\1\0\2\14\1\247\26\14\25\0" +
                    "\3\14\1\0\5\14\1\250\23\14\25\0\3\14\1\0" +
                    "\16\14\1\251\12\14\25\0\3\14\1\0\3\14\1\252" +
                    "\25\14\25\0\3\14\1\0\5\14\1\253\23\14\25\0" +
                    "\3\14\1\0\11\14\1\254\17\14\25\0\3\14\1\0" +
                    "\23\14\1\255\5\14\25\0\3\14\1\0\10\14\1\256" +
                    "\20\14\25\0\3\14\1\0\12\14\1\257\16\14\25\0" +
                    "\3\14\1\0\10\14\1\260\20\14\25\0\3\14\1\0" +
                    "\5\14\1\261\23\14\25\0\3\14\1\0\27\14\1\262" +
                    "\1\14\25\0\3\14\1\0\11\14\1\263\17\14\25\0" +
                    "\3\14\1\0\27\14\1\264\1\14\25\0\3\14\1\0" +
                    "\12\14\1\265\16\14\25\0\3\14\1\0\1\14\1\266" +
                    "\27\14\25\0\3\14\1\0\11\14\1\267\17\14\25\0" +
                    "\3\14\1\0\3\14\1\270\25\14\25\0\3\14\1\0" +
                    "\5\14\1\271\23\14\25\0\3\14\1\0\22\14\1\272" +
                    "\6\14\25\0\3\14\1\0\15\14\1\273\13\14\25\0" +
                    "\3\14\1\0\26\14\1\274\2\14\25\0\3\14\1\0" +
                    "\1\14\1\275\27\14\25\0\3\14\1\0\5\14\1\276" +
                    "\23\14\25\0\3\14\1\0\1\14\1\277\27\14\25\0" +
                    "\3\14\1\0\11\14\1\300\17\14\25\0\3\14\1\0" +
                    "\1\14\1\301\27\14\25\0\3\14\1\0\15\14\1\302" +
                    "\13\14\25\0\3\14\1\0\7\14\1\303\21\14\25\0" +
                    "\3\14\1\0\1\14\1\304\27\14\25\0\3\14\1\0" +
                    "\12\14\1\305\16\14\25\0\3\14\1\0\16\14\1\306" +
                    "\12\14\11\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[7300];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
            "Unknown internal scanner error",
            "Error: could not match input",
            "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0 =
            "\1\0\1\11\3\1\1\11\4\1\1\11\3\1\1\11" +
                    "\20\1\13\11\4\0\36\1\1\11\1\0\37\1\1\11" +
                    "\37\1\1\11\70\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[198];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */
        int j = offset;  /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do result[j++] = value; while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is
     * the source of the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read
     * from input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /**
     * The number of occupied positions in zzBuffer beyond zzEndRead.
     * When a lead/high surrogate has been read from the input stream
     * into the final zzBuffer position, this will have a value of 1;
     * otherwise, it will have a value of 0.
     */
    private int zzFinalHighSurrogate = 0;

  /* user code: */

    Token to = new Token();


    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public AnalisadorLexo(java.io.Reader in) {
        this.zzReader = in;
    }


    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;  /* index in packed string  */
        int j = 0;  /* index in unpacked array */
        while (i < 168) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do map[j++] = value; while (--count > 0);
        }
        return map;
    }


    /**
     * Refills the input buffer.
     *
     * @return <code>false</code>, iff there was new input.
     * @throws java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
        if (zzStartRead > 0) {
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

      /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

    /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
            char newBuffer[] = new char[zzBuffer.length * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
            zzEndRead += zzFinalHighSurrogate;
            zzFinalHighSurrogate = 0;
        }

    /* fill the buffer with new input */
        int requested = zzBuffer.length - zzEndRead;
        int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
        if (numRead == 0) {
            throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
        }
        if (numRead > 0) {
            zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
            if (numRead == requested) {
                if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
                    --zzEndRead;
                    zzFinalHighSurrogate = 1;
                }
            }
      /* potentially more input available */
            return false;
        }

    /* numRead < 0 ==> end of stream */
        return true;
    }


    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */
        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null)
            zzReader.close();
    }


    /**
     * Resets the scanner to read from a new input stream.
     * Does not close the old reader.
     * <p>
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost).
     * Lexical state is set to <tt>ZZ_INITIAL</tt>.
     * <p>
     * Internal scan buffer is resized down to its initial length, if it has grown.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        zzFinalHighSurrogate = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
        if (zzBuffer.length > ZZ_BUFFERSIZE)
            zzBuffer = new char[ZZ_BUFFERSIZE];
    }


    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }


    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }


    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }


    /**
     * Returns the character at position <tt>pos</tt> from the
     * matched text.
     * <p>
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch.
     *            A value from 0 to yylength()-1.
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }


    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }


    /**
     * Reports an error that occured while scanning.
     * <p>
     * In a wellformed scanner (no or only correct usage of
     * yypushback(int) and a match-all fallback rule) this method
     * will only be called with things that "Can't Possibly Happen".
     * If this method is called, something is seriously wrong
     * (e.g. a JFlex bug producing a faulty scanner etc.).
     * <p>
     * Usual syntax/scanner level error handling should be done
     * in error fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }


    /**
     * Pushes the specified amount of characters back into the input stream.
     * <p>
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again.
     *               This number must not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength())
            zzScanError(ZZ_PUSHBACK_2BIG);

        zzMarkedPos -= number;
    }


    /**
     * Resumes scanning until the next regular expression is matched,
     * the end of input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @throws java.io.IOException if any I/O-Error occurs
     */
    public int yylex() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            boolean zzR = false;
            int zzCh;
            int zzCharCount;
            for (zzCurrentPosL = zzStartRead;
                 zzCurrentPosL < zzMarkedPosL;
                 zzCurrentPosL += zzCharCount) {
                zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
                zzCharCount = Character.charCount(zzCh);
                switch (zzCh) {
                    case '\u000B':
                    case '\u000C':
                    case '\u0085':
                    case '\u2028':
                    case '\u2029':
                        yyline++;
                        yycolumn = 0;
                        zzR = false;
                        break;
                    case '\r':
                        yyline++;
                        yycolumn = 0;
                        zzR = true;
                        break;
                    case '\n':
                        if (zzR)
                            zzR = false;
                        else {
                            yyline++;
                            yycolumn = 0;
                        }
                        break;
                    default:
                        zzR = false;
                        yycolumn += zzCharCount;
                }
            }

            if (zzR) {
                // peek one character ahead if it is \n (if we have counted one line too much)
                boolean zzPeek;
                if (zzMarkedPosL < zzEndReadL)
                    zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                else if (zzAtEOF)
                    zzPeek = false;
                else {
                    boolean eof = zzRefill();
                    zzEndReadL = zzEndRead;
                    zzMarkedPosL = zzMarkedPos;
                    zzBufferL = zzBuffer;
                    if (eof)
                        zzPeek = false;
                    else
                        zzPeek = zzBufferL[zzMarkedPosL] == '\n';
                }
                if (zzPeek) yyline--;
            }
            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }


            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                        zzCurrentPosL += Character.charCount(zzInput);
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
                            zzCurrentPosL += Character.charCount(zzInput);
                        }
                    }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) break zzForAction;
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) break zzForAction;
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                zzAtEOF = true;
                return YYEOF;
            } else {
                switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                    case 1: {
                        System.out.print(yytext());
                    }
                    case 58:
                        break;
                    case 2: {
                        System.out.println(" Op_relacional   -> " + yytext());
                        to.token("280" + "\n");
                    }
                    case 59:
                        break;
                    case 3: {
                        System.out.println(" Atrib_            -> " + yytext());
                        to.token("61" + "\n");
                    }
                    case 60:
                        break;
                    case 4: {
                        System.out.println(" op_aditivo          -> " + yytext());
                        to.token("282" + "\n");
                    }
                    case 61:
                        break;
                    case 5: { /* Fazer Nada */
                    }
                    case 62:
                        break;
                    case 6: {
                        System.out.println(" id                        -> " + yytext());
                        to.add(new Token(yytext(), 300));
                    }
                    case 63:
                        break;
                    case 7: {
                        System.out.println(" inteiro                   -> " + yytext());
                        to.token("290" + " " + yytext() + "\n");
                    }
                    case 64:
                        break;
                    case 8: {
                        System.out.println(" Ponto             -> " + yytext());
                        to.token("46" + "\n");
                    }
                    case 65:
                        break;
                    case 9: {
                        System.out.println(" Abrepar           -> " + yytext());
                        to.token("40" + "\n");
                    }
                    case 66:
                        break;
                    case 10: {
                        System.out.println(" Fechapar          -> " + yytext());
                        to.token("41" + "\n");
                    }
                    case 67:
                        break;
                    case 11: {
                        System.out.println(" Abrechave         -> " + yytext());
                        to.token("123" + "\n");
                    }
                    case 68:
                        break;
                    case 12: {
                        System.out.println(" Fechachave        -> " + yytext());
                        to.token("125" + "\n");
                    }
                    case 69:
                        break;
                    case 13: {
                        System.out.println(" Abrecolc          -> " + yytext());
                        to.token("91" + "\n");
                    }
                    case 70:
                        break;
                    case 14: {
                        System.out.println(" Fechacolc         -> " + yytext());
                        to.token("93" + "\n");
                    }
                    case 71:
                        break;
                    case 15: {
                        System.out.println(" Term_ponto_e_virgula -> " + yytext());
                        to.token("59" + "\n");
                    }
                    case 72:
                        break;
                    case 16: {
                        System.out.println(" Dois Ponto        -> " + yytext());
                        to.token("58" + "\n");
                    }
                    case 73:
                        break;
                    case 17: {
                        System.out.println(" VÍRGULA           -> " + yytext());
                        to.token("44" + "\n");
                    }
                    case 74:
                        break;
                    case 18: {
                        System.out.println(" Op_logico           -> " + yytext());
                        to.token("283" + "\n");
                    }
                    case 75:
                        break;
                    case 19: {
                        System.out.println(" IF           -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 76:
                        break;
                    case 20: {
                        System.out.println(" DO           -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 77:
                        break;
                    case 21: {
                        System.out.println(" Op_multiplicativo   -> " + yytext());
                        to.token("281" + "\n");
                    }
                    case 78:
                        break;
                    case 22: {
                        System.out.println(" Float                     -> " + yytext());
                        to.token("292" + " " + yytext() + "\n");
                    }
                    case 79:
                        break;
                    case 23: {
                        System.out.println(" ARG       -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 80:
                        break;
                    case 24: {
                        System.out.println(" INT          -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 81:
                        break;
                    case 25: {
                        System.out.println(" NEW          -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 82:
                        break;
                    case 26: {
                        System.out.println(" FOR          -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 83:
                        break;
                    case 27: {
                        System.out.println(" Comentario                -> " + yytext());
                    }
                    case 84:
                        break;
                    case 28: {
                        System.out.println(" ELSE         -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 85:
                        break;
                    case 29: {
                        System.out.println(" MAIN         -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 86:
                        break;
                    case 30: {
                        System.out.println(" ARGS       -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 87:
                        break;
                    case 31: {
                        System.out.println(" CASE         -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 88:
                        break;
                    case 32: {
                        System.out.println(" CHAR         -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 89:
                        break;
                    case 33: {
                        System.out.println(" TRUE         -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 90:
                        break;
                    case 34: {
                        System.out.println(" THIS         -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 91:
                        break;
                    case 35: {
                        System.out.println(" VOID         -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 92:
                        break;
                    case 36: {
                        System.out.println(" BREAK        -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 93:
                        break;
                    case 37: {
                        System.out.println(" CLASS        -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 94:
                        break;
                    case 38: {
                        System.out.println(" SUPER        -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 95:
                        break;
                    case 39: {
                        System.out.println(" TROW         -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 96:
                        break;
                    case 40: {
                        System.out.println(" FALSE        -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 97:
                        break;
                    case 41: {
                        System.out.println(" WHILE        -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 98:
                        break;
                    case 42: {
                        System.out.println(" IMPORT       -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 99:
                        break;
                    case 43: {
                        System.out.println(" STATIC       -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 100:
                        break;
                    case 44: {
                        System.out.println(" SWITCH       -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 101:
                        break;
                    case 45: {
                        System.out.println(" TROWS        -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 102:
                        break;
                    case 46: {
                        System.out.println(" RETURN       -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 103:
                        break;
                    case 47: {
                        System.out.println(" PUBLIC       -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 104:
                        break;
                    case 48: {
                        System.out.println(" STRING       -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 105:
                        break;
                    case 49: {
                        System.out.println(" EXTENDS      -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 106:
                        break;
                    case 50: {
                        System.out.println(" BOOLEAN      -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 107:
                        break;
                    case 51: {
                        System.out.println(" DEFAULT      -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 108:
                        break;
                    case 52: {
                        System.out.println(" FINALLY      -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 109:
                        break;
                    case 53: {
                        System.out.println(" PACKAGE      -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 110:
                        break;
                    case 54: {
                        System.out.println(" CONTINUE     -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 111:
                        break;
                    case 55: {
                        System.out.println(" INTERFACE    -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 112:
                        break;
                    case 56: {
                        System.out.println(" IMPLEMENTS   -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 113:
                        break;
                    case 57: {
                        System.out.println(" INSTANCEOF   -> " + yytext());
                        to.addSingle(new Token(yytext()));
                    }
                    case 114:
                        break;
                    default:
                        zzScanError(ZZ_NO_MATCH);
                }
            }
        }
    }

    /**
     * Runs the scanner on input files.
     * <p>
     * This is a standalone scanner, it will print any unmatched
     * text to System.out unchanged.
     *
     * @param argv the command line, contains the filenames to run
     *             the scanner on.
     */
    public static void main(String argv[]) {
        if (argv.length == 0) {
            System.out.println("Usage : java AnalisadorLexo [ --encoding <name> ] <inputfile(s)>");
        } else {
            int firstFilePos = 0;
            String encodingName = "UTF-8";
            if (argv[0].equals("--encoding")) {
                firstFilePos = 2;
                encodingName = argv[1];
                try {
                    java.nio.charset.Charset.forName(encodingName); // Side-effect: is encodingName valid?
                } catch (Exception e) {
                    System.out.println("Invalid encoding '" + encodingName + "'");
                    return;
                }
            }
            for (int i = firstFilePos; i < argv.length; i++) {
                AnalisadorLexo scanner = null;
                try {
                    java.io.FileInputStream stream = new java.io.FileInputStream(argv[i]);
                    java.io.Reader reader = new java.io.InputStreamReader(stream, encodingName);
                    scanner = new AnalisadorLexo(reader);
                    while (!scanner.zzAtEOF) scanner.yylex();
                } catch (java.io.FileNotFoundException e) {
                    System.out.println("File not found : \"" + argv[i] + "\"");
                } catch (java.io.IOException e) {
                    System.out.println("IO error scanning file \"" + argv[i] + "\"");
                    System.out.println(e);
                } catch (Exception e) {
                    System.out.println("Unexpected exception:");
                    e.printStackTrace();
                }
            }
        }
    }


}
